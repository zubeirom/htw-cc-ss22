apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio
  namespace: minio
spec:
  selector:
    matchLabels:
      app: minio # has to match .spec.template.metadata.labels
  strategy:
    # Specifies the strategy used to replace old Pods by new ones
    # Refer: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    type: Recreate
  template:
    metadata:
      labels:
        # This label is used as a selector in Service definition
        app: minio
    spec:
      # Volumes used by this deployment
      volumes:
        - name: data
          # This volume is based on PVC
          persistentVolumeClaim:
            # Name of the PVC created earlier
            claimName: minio-pv-claim
      containers:
        - name: minio
          # Volume mounts for this container
          volumeMounts:
            # Volume 'data' is mounted to path '/data'
            - name: data
              mountPath: "/data"
          # Pulls the lastest Minio image from Docker Hub
          image: minio/minio
          command:
            - /bin/bash
            - -c
          args:
            - minio server /data --console-address :9090
          env:
            - name: CONSOLE_SECURE_TLS_REDIRECT
              value: "off"
            # MinIO access key and secret key
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secret
                  key: root-password
          ports:
            - containerPort: 9000
          # Readiness probe detects situations when MinIO server instance
          # is not ready to accept traffic. Kubernetes doesn't forward
          # traffic to the pod while readiness checks fail.
          # readinessProbe:
          #   httpGet:
          #     path: /minio/health/ready
          #     port: 9000
          #   initialDelaySeconds: 120
          #   periodSeconds: 20
          # # Liveness probe detects situations where MinIO server instance
          # # is not working properly and needs restart. Kubernetes automatically
          # # restarts the pods if liveness checks fail.
          # livenessProbe:
          #   httpGet:
          #     path: /minio/health/live
          #     port: 9000
          #   initialDelaySeconds: 120
          #   periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  # This name uniquely identifies the service
  name: minio-service
  namespace: minio
spec:
  type: LoadBalancer
  ports:
    - protocol: TCP
      name: http
      port: 9000
      targetPort: 9000
  selector:
    # Looks for labels `app:minio` in the namespace and applies the spec
    app: minio